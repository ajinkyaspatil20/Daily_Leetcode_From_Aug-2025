import java.util.*;

class Solution {
    public long maximumTotalDamage(int[] power) {
        Map<Integer, Long> map = new HashMap<>();
        for (int p : power) {
            map.put(p, map.getOrDefault(p, 0L) + p);
        }

        List<Integer> keys = new ArrayList<>(map.keySet());
        Collections.sort(keys);

        int n = keys.size();
        if (n == 0) return 0L;

        long[] dp = new long[n];
        dp[0] = map.get(keys.get(0));

        for (int i = 1; i < n; i++) {
            long curDamage = map.get(keys.get(i));
            int j = lastIndexLE(keys, (long)keys.get(i) - 3L);
            long take = curDamage + (j >= 0 ? dp[j] : 0L);
            long skip = dp[i - 1];
            dp[i] = Math.max(take, skip);
        }

        return dp[n - 1];
    }

    private int lastIndexLE(List<Integer> keys, long target) {
        int l = 0, r = keys.size() - 1, ans = -1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (keys.get(m) <= target) {
                ans = m;
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return ans;
    }
}
